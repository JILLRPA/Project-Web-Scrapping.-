Project: scrapping the data for the most popular feature films of 2016 from the IMDb website.

Web scraping is a technique for converting the data present in unstructured format (HTML tags) over the web to the structured format which can easily be accessed and used.

I  used R for scrapping the data for the most popular feature films of 2016 from the IMDb website.

We'll get a number of features for each of the 100 popular feature films released in 2016. Also, we'll look at the most common problems that one might face while scrapping data from the internet because of lack of consistency in the website code and look at how to solve these problems.

There are several ways of scraping data from the web. Some of the popular ways are:

Human Copy-Paste: This is a slow and efficient way of scraping data from the web. This involves humans themselves analyzing and copying the data to local storage.
Text pattern matching: Another simple yet powerful approach to extract information from the web is by using regular expression matching facilities of programming languages. You can learn more about regular expressions here.
API Interface: Many websites like Facebook, Twitter, LinkedIn, etc. provides public and/ or private APIs which can be called using standard code for retrieving the data in the prescribed format.
DOM Parsing: By using the web browsers, programs can retrieve the dynamic content generated by client-side scripts. It is also possible to parse web pages into a DOM tree, based on which programs can retrieve parts of these pages.

R code of web scraping

Steps to follow;

#Loading the rvest &XML package(scraping package in r )

library(XML)
library(rvest)

#Specifying the url for desired website to be scrapped and #Reading the HTML code from the website

imbd = read_html("http://www.imdb.com/search/title?count=100&release_date=2016,2016&title_type=feature")

Now, we'll be scraping the following data from this website.

Rank: The rank of the film from 1 to 100 on the list of 100 most popular feature films released in 2016.
Title: The title of the feature film.
Description: The description of the feature film.
Runtime: The duration of the feature film.
Genre: The genre of the feature film,
Rating: The IMDb rating of the feature film.
Metascore: The metascore on IMDb website for the feature film.
Votes: Votes cast in favor of the feature film.
Gross_Earning_in_Mil: The gross earnings of the feature film in millions.
Director: The main director of the feature film. Note, in case of multiple directors, I'll take only the first.
Actor: The main actor of the feature film. Note, in case of multiple actors, I'll take only the first.

#Using CSS selectors to scrap the rankings section and Converting the ranking data to text

rank = imbd%>%html_nodes(" .text-primary")%>%html_text()

#Data-Preprocessing: Converting rankings to numerical

rank<-as.numeric(Rank)
rank

#Let's have another look at the rankings
head(rank)

#Using CSS selectors to scrap the title section and Converting the title data to text

title = imbd%>%html_nodes(" .lister-item-header a")%>%html_text()
title
ascending 
#Converting the title data  collapse format

paste(title ,collapse = "")

#sorting movies based on alphabetical order (ascending and descending order ) and 

titlesort1 = sort(title, decreasing=TRUE)
titlesort2 = sort(title, decreasing=FALSE)

#sorting last 10 movies 

titlesort = head(sort(title, decreasing=TRUE), 10)

#Using CSS selectors to scrap the description section and Converting the title data to text

description = imbd%>%html_nodes(".ratings-bar+ .text-muted")%>%html_text()

#Data-Preprocessing: removing '\n'

description = gsub("\n","",description)
description

#Using CSS selectors to scrap the Movie runtime section and Converting the title data to text

runtime = imbd%>%html_nodes(".text-muted .runtime")%>%html_text()

#Data-Preprocessing: removing mins and converting it to numerical

runtime = gsub("min","",runtime)
runtime = as.numeric(runtime)
runtime

#Using CSS selectors to scrap the Movie genre section and #Converting the genre data to text

genre = imbd%>%html_nodes(".genre")%>%html_text()

#Data-Preprocessing: removing \n

genre = gsub("\n","",genre)

#Data-Preprocessing: removing excess spaces

genre<-gsub(" ","",genre)

#Convering each genre from text to factor

genre<-as.factor(genre)
genre

#Using CSS selectors to scrap the IMDB rating section and Converting the ratings data to text

rating = imbd%>%html_nodes(".ratings-imdb-rating strong")%>%html_text()

#Data-Preprocessing: converting ratings to numerical

rating = as.numeric(rating)
rating
head(rating)
summary(rating)
max(rating)

#Using CSS selectors to scrap the votes section and Converting the votes data to text

votes = imbd%>%html_nodes(".sort-num_votes-visible span:nth-child(2)")%>%html_text()

#Data-Preprocessing: removing commas and converting votes to numerical

votes = gsub(",","",votes)
#votes<-gsub(" ","",votes)
votes<-as.numeric(votes)
votes

#Using CSS selectors to scrap the directors section and onverting the directors data to text

directors = imbd%>%html_nodes(".text-muted+ p a:nth-child(1)")%>%html_text()
#directors  = gsub("","",directors)
directors<-gsub(" ","",directors)

#Data-Preprocessing: converting directors data into factors

directors<-as.factor(directors)
directors

#Using CSS selectors to scrap the actors section and Converting the actors data to text

actor = imbd%>%html_nodes(".lister-item-content .ghost+ a")%>%html_text()
actor  = gsub("","",actor)
#directors<-gsub(" ","",actor)

#Data-Preprocessing: converting actors data into factors

actor<-as.factor(actor)
actor

#Using CSS selectors to scrap the metascore section and onverting the runtime data to text

metascore = imbd%>%html_nodes(".metascore")%>%html_text()

#Data-Preprocessing: removing extra space in metascore

metascore<-gsub(" ","",metascore)
metascore = as.numeric(metascore)
metascore

#Metascore is missing for movies 19,24,49,91,97

for (i in c(19,24,49,91,97)){
  
a<-metascore[1:(i-1)]
  
b<-metascore[i:length(metascore)]
  
metascore<-append(a,list("NA"))
  
metascore<-append(metascore,b)

}

length(metascore)

#Data-Preprocessing: converting metascore to numerical

metascore<-as.numeric(metascore)

# summary statistics

summary(metascore)

#Using CSS selectors to scrap the gross revenue section and Converting the gross revenue data to text

gross = imbd%>%html_nodes(".ghost~ .text-muted+ span")%>%html_text()

#Data-Preprocessing: removing '$' and 'M' signs

gross = gsub("M","",gross)
gross<-substring(gross,2,7)
gross<-gsub(" ","",gross)
gross

#Filling missing entries with NA (4,14,19,24,32,36,37,49,54,65,73,86,91,93,97)

for (i in c(4,14,19,24,32,36,37,49,54,65,73,86,91,93,97)){
  
  a<-gross[1:(i-1)]
  
  b<-gross[i:length(gross)]
  
  gross<-append(a,list("NA"))
  
  gross<-append(gross,b)
  
}

gross<-as.numeric(gross)
length(gross)
summary(gross)

#Combining all the lists to form a data frame

movies_df = data.frame(Rank = rank,Title=title,
                       Description = description,Runtime = runtime,
                       Genre = genre,Rating = rating,
                       Metascore = metascore,Votes = votes,
                       Gross = gross,Director = directors,Actor = actor)


str(movies_df)

Glimps of analysis 

table(gross,title)

barplot(rating, main = "top rated movies", xlab="movies", ylab = "ratings")
barplot(rating)

counts = table(grosssort,titlesort)

barplot(counts, main = "top rated movies", horiz = TRUE,xlab="GROSS", ylab = "TITLE")
barplot(grosssort)

#plot(x, y, xlim=c(11, 12), ylim=c(0, 150))

hist(rating, breaks = 15, main = "top rated movies", xlab="movies", ylab = "ratings")
barplot

movietime_gross = by(imbd_table7$gross,votes, function(x) mean(x))
barplot(grosssort, main = "Top Rated Movies", xlab="Movies", ylab = "Ratings")


imbd_table = data.frame(title,actor,runtime,metascore)
imbd_table2 = data.frame(title,runtime,votes)
imbd_table3 = data.frame(actor,title,runtime)
imbd_table4 = data.frame(directors)
imbd_table5 = data.frame(title,gross)
imbd_table6 = data.frame(gross,actor)
imbd_table7 = table(gross,votes)

barplot(as.matrix(imbd_table7))

barplot(grosssort, main = "top rated movies", xlab="movies", ylab = "gross")
barplot(grosssort)

imbd_table$title[imbd_table$genre!="Adventure"& imbd_table$runtime<100]

##theater = imbd%>%html_nodes(".li_group")%>%html_test()
##matrix(theater, ncol = 1)

movietime_genre = by(imbd_table$runtime,title, function(x) mean(x))
barplot(movietime_genre, main = "Average movie runtime by genre",horiz = TRUE, xlab = "genre", ylab = "runtime(min)")

library(plotly)
library(dplyr)
library(tidyr)
library(shiny)
library(hovertest)

plot_ly(data=counts,x=titlesort,y=grosssort,type = "bar",marker=list(colors="blue"),
        hovertest="test",test= title)%>%layout(title="Movie times by genre", color="red")

plot_ly(data=counts,x=grosssort,y=titlesort,type = "bar",marker=list(colors="blue"),
        hovertest="test",test= title)%>%layout(title="Movie times by genre", color="red", xlim=c(0, 1000), ylim=c(0, 1000))

plot_ly(data=imbd_table7,x=title,y=gross,type = "bar",marker=list(colors="red"),
        hovertest="test",test= title)%>%layout(title="Movie times by genre", color="green")

counts = data.frame(grosssort,titlesort)

#which movie from which Genre had the longest runtime?

library(ggplot2)
qplot(data = grosssort,runtime,fill = genre,bins = 30)



#in the Runtime of 130-160 mins, which genre has the highest votes?

ggplot(movies_df,aes(x=runtime,y=rating))+
  geom_point(aes(size=votes,col=genre))

#across all genres which genre has the highest average gross earnings in runtime 100 to 120.

ggplot(movies_df,aes(x=runtime,y=gross))+
  geom_point(aes(size=rating,col=genre))

plot(grosssort, titlesort, xlim=c(0, 1000), ylim=c(0, 1000))
plot(counts,xlim=grosssort, ylim=titlesort)

